"""autogenerated by genmsg_py from Path_rrt.msg. Do not edit."""
import roslib.message
import struct


class Path_rrt(roslib.message.Message):
  _md5sum = "f59eb92db85a2cd5997e929beafae112"
  _type = "rrt/Path_rrt"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64[] path_X
float64[] path_Y
float64[] path_Z
float64[] start_state
float64 hdg
float64 psi

"""
  __slots__ = ['path_X','path_Y','path_Z','start_state','hdg','psi']
  _slot_types = ['float64[]','float64[]','float64[]','float64[]','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       path_X,path_Y,path_Z,start_state,hdg,psi
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Path_rrt, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.path_X is None:
        self.path_X = []
      if self.path_Y is None:
        self.path_Y = []
      if self.path_Z is None:
        self.path_Z = []
      if self.start_state is None:
        self.start_state = []
      if self.hdg is None:
        self.hdg = 0.
      if self.psi is None:
        self.psi = 0.
    else:
      self.path_X = []
      self.path_Y = []
      self.path_Z = []
      self.start_state = []
      self.hdg = 0.
      self.psi = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      length = len(self.path_X)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.path_X))
      length = len(self.path_Y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.path_Y))
      length = len(self.path_Z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.path_Z))
      length = len(self.start_state)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.start_state))
      _x = self
      buff.write(_struct_2d.pack(_x.hdg, _x.psi))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.path_X = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.path_Y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.path_Z = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_state = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 16
      (_x.hdg, _x.psi,) = _struct_2d.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      length = len(self.path_X)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.path_X.tostring())
      length = len(self.path_Y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.path_Y.tostring())
      length = len(self.path_Z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.path_Z.tostring())
      length = len(self.start_state)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.start_state.tostring())
      _x = self
      buff.write(_struct_2d.pack(_x.hdg, _x.psi))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.path_X = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.path_Y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.path_Z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_state = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 16
      (_x.hdg, _x.psi,) = _struct_2d.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_2d = struct.Struct("<2d")
